name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and push backend image
    - name: Build and push backend image
      run: |
        docker build -f backend/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

    # Step 5: Build and push frontend image
    - name: Build and push frontend image
      run: |
        docker build -f frontend/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

    # Step 6: Set up AWS CLI and kubectl
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    # Step 7: Configuring kubectl to interact with EKS cluster
    - name: Configure kubectl
      run: |
        aws eks --region ap-south-1 update-kubeconfig --name my-cluster

    # Step 8: Create the Kubernetes secret for Weather API Key
    - name: Create Kubernetes secret for Weather API Key
      run: |
        kubectl create secret generic weather-api-secret \
          --from-literal=api_key=${{ secrets.WEATHER_API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -

    # Step 9: Deploying to Kubernetes on EKS
    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/backend-service.yaml
        kubectl apply -f kubernetes/backend-deployment.yaml
        kubectl apply -f kubernetes/frontend-deployment.yaml
        kubectl rollout status deployment/backend
        kubectl rollout status deployment/frontend
